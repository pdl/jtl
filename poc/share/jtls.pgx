%grammar jtls
%version 0.1.0
%include pegex-atoms

jtls:
  instruction

nameToken: /- ([a-zA-Z]+) -/

# instruction
# template {...} | template (...)

instruction:
  instructionChain | functionalInstruction

instructionChain:
  ( chainLoneArgument | argumentList )
  ( chainedInstruction )+

chainLoneArgument:
  ( literal | pathExpression | functionalInstruction )

chainedInstruction:
  ( infix )
  ( nameToken )
  ( explicitArguments | implicitArguments )

infix:
  /- '->' -/

functionalInstruction:
  ( nameToken )
  ( explicitArguments | implicitArguments )

# explicitArguments
# { select: current() }
# { select: current(), name: 'self' }

explicitArguments:
  /- '{' -/
  ( explicitArgument )* % /- ',' -/
  /- '}' -/

# explicitArgument:
# select: current()

explicitArgument:
  ( nameToken )
  /- ':' -/
  ( loneArgument | argumentList )

implicitArguments:
  ( argumentList )

# argumentList
# ( current(), parent(), 123, "foo", )

argumentList:
  /- '(' -/
    ( argument )* % /- ',' -/
    #  ',' ?
  /- ')' -/

argument:
  ( instruction | literal | pathExpression )

loneArgument:
  ( argument )

pathExpression:
  ( anchor )
  ( step )+

# Todo: handle both the slashes in the step, as it's still legal to do foo//bar

anchor: # NB: this rule is sensitive to order of items
  anchorChild | anchorParent | anchorRoot

anchorRoot:
  ''

anchorChild:
  '.'

anchorParent:
  '..'

step:
  /- '/' -/
  ( stepAny | stepNameToken | stepNumber | stepString )
  ( filter? )

stepAny:
  '*'

stepNameToken:
  ( nameToken )

stepNumber:
  ( integer )

stepString:
  ( string )

filter:
  /- '[' -/
    ( argument )
  /- ']' -/

integer: /(
  DASH?
  (: '0' | [1-9] DIGIT* )
)/

literal: - value -

# Hereafter taken straight from the JSON grammar, except that string has been split into singlestring and doublestring

json: - value -

object:
  /- '{' -/
  pair* % /- ',' -/
  /- '}' -/

pair: string /- ':' -/ value

array:
  /- '[' -/
  value* % /- ',' -/
  /- ']' -/

value:
  | string
  | number
  | object
  | array
  | true
  | false
  | null

# string and number are interpretations of http://www.json.org/

string:
  doublestring | singlestring

doublestring: /
  DOUBLE
    (
      (:
        BACK (:     # Backslash escapes
          [
            DOUBLE  # Double Quote
            BACK    # Back Slash
            SLASH   # Forward Slash
            'b'     # Back Space
            'f'     # Form Feed
            'n'     # New Line
            'r'     # Carriage Return
            't'     # Horizontal Tab
          ]
        |
          'u' HEX{4}    # Unicode octet pair
        )
      |
        [^ DOUBLE CONTROLS ]  # Anything else
      )*
    )
  DOUBLE
/

singlestring: /
  SINGLE
    (
      (:
        BACK (:     # Backslash escapes
          [
            SINGLE  # Single Quote
            BACK    # Back Slash
            SLASH   # Forward Slash
            'b'     # Back Space
            'f'     # Form Feed
            'n'     # New Line
            'r'     # Carriage Return
            't'     # Horizontal Tab
          ]
        |
          'u' HEX{4}    # Unicode octet pair
        )
      |
        [^ SINGLE CONTROLS ]  # Anything else
      )*
    )
  SINGLE
/


number: /(
  DASH?
  (: '0' | [1-9] DIGIT* )
  (: DOT DIGIT* )?
  (: [eE] [ DASH PLUS ]? DIGIT+ )?
)/

true: 'true'

false: 'false'

null: 'null'
